const substrate = require('./substrate.js')
const websocket = require('ws')
const colors = require('colors/safe')
const NAME = __filename.split('/').pop().split('.')[0].toUpperCase()
function LOG (...msgs) {
  msgs = [`[${NAME}] `, ...msgs].map(msg => colors.orange(msg))
  console.log(...msgs)
}
var ready = false, queue = [], accounts = {}, waitlist = {}

const chain = new websocket('ws://localhost:8080')
chain.on('message', receive)
chain.on('open', err => {
  ready = true
  queue.forEach(done => err ? done(err) : done(null, send))
  for (var i = 0; i < queue.length; i++) queue[i] = null
})

module.exports = datdotchain

function datdotchain (opts, done) {
  // @TODO: maybe do custom handshake with `chain` to check it's `datdot`
  if (!ready) return (queue.push(done), void 0)
  done(null, send)
  // function on (name, handler) { }
}
function receive (message) {
  const { type, ID, data } = message
  const account = type === 'event_new_account' ? data.pkey : ID
  const callback = waitlist[account][data.nonce]
  if (!callback) return LOG('error - unexpected message', message)
  delete waitlist[account][data.nonce]
  if (type.indexOf('error_') !== -1) return callback(message)
  callback(null, data)
}
function send (message, done) {
  const { type, ID, data } = message
  const account = ID || data.pkey
  waitlist[account][data.nonce] = done
  // @TODO: validate message, before sending
  chain.send(JSON.stringify(message))
}
