const WebSocket = require('ws')
const colors = require('colors/safe')
const NAME = __filename.split('/').pop().split('.')[0].toUpperCase()
function LOG (...msgs) {
  msgs = [`[${NAME}] `, ...msgs].map(msg => colors.red(msg))
  console.log(...msgs)
}
// ----------------------------------------------------------------------------

const chain = new WebSocket.Server({ port: 8080 })

const counter = 0
const storage = {
  accounts: {},
  hosters: [],
  encoders: [],
  publishers: [],
  feeds: [],
}

chain.on('connection', function connection (ws) {
  ws.on('message', receive)
  function receive (message) {
    const { type, ID, signature, data } = JSON.parse(message)
    LOG(type, message)
    const action = API[type]
    if (!action) return send({ type: 'error_invalid_message_type', ID, data })
    action(message, send)
  }
  function send (message) {
    ws.send(JSON.stringify(message))
  }
})

const API = {
  make_account,
  publish_data,
}
/******************************************************************************
  ACTIONS
******************************************************************************/
function make_account (message, done) {
  const { type, ID, signature, data } = message
  const { nonce, pkey, proof } = data
  if (storage.accounts[pkey]) return done({ type: 'error_account_already_taken', nonce })
  if (!verify(signature, pkey, data)) return done({ type: 'error_invalid_signature', nonce })
  if (!verifyProof(proof)) return done({ type: 'error_invalid_proof', nonce })
  const ID = counter++
  storage.accounts[ID] = { pkey }
  // @TODO: send BALANCE to PKEY
  done({ type: 'event_new_account', ID, { nonce, pkey } })
}
function verifyProof (proof) {
  // @TODO: depending on what `proof` is, verify the (useful) work
  return true
}
function verify (signature, pkey, data) {
  // @TODO: verify signature with valid public key
  // const hash1 = recover(pkey, signature)
  // const hash2 = hash(data)
  // return hash1 === hash2
  return true
}
/*****************************************************************************/
function publish_data (message, done) {
  const { type, ID, signature, data } = message
  const pkey = storage.accounts[ID]
  const { nonce, feeds } = data
  // -----------------------------------------------------
  const feedX = {
    disckey, // = DHT topic
    feedkey, // = feed publickey
    roots: [
      { hash, signature, length },
      { hash, signature, length },
      { hash, signature, length },
    ]
  }
  const feeds = [
    feed1,
    feed2,
    feedX
  ]

}


function publishData (message, done) {
  const { signature, ID, data } = message
  if (!verify(pkey, signature, data)) // @TODO: ...
  const { nonce, feedkey } = data
  const pkey = accounts.
  waiting[nonce] = done
  const data = { feedkey }
  send({ type: 'publish_data', ID, nonce, signature, data })
}
function offerEncoding (message, done) {
  const { signature, pkey } = message
  if (!verify(signature, pkey)) done(new Error('invalid signature'))

}
function registerHoster (opts, done) {
  const { signature, pkey } = opts
  if (!verify(signature, pkey)) done(new Error('invalid signature'))

}
// SERVICE PHASE
// function getChallenges () {}
// function attest () {}
// function respondToChallenges () {}
//
