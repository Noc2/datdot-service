"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.info = info;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _util = require("@polkadot/util");

var _util2 = require("../util");

// Copyright 2017-2019 @polkadot/api-derive authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
function dataAsString(data) {
  return data.isRaw ? (0, _util.u8aToString)(data.asRaw.toU8a(true)) : data.isSha256 ? data.asSha256.toHex() : undefined;
}

function retrieveNick(api, accountId) {
  var _api$query$nicks;

  return (accountId && ((_api$query$nicks = api.query.nicks) === null || _api$query$nicks === void 0 ? void 0 : _api$query$nicks.nameOf) ? api.query.nicks.nameOf(accountId) : (0, _rxjs.of)(undefined)).pipe((0, _operators.map)(nameOf => (nameOf === null || nameOf === void 0 ? void 0 : nameOf.isSome) ? (0, _util.u8aToString)(nameOf.unwrap()[0]).substr(0, api.consts.nicks.maxLength.toNumber()) : undefined));
}

function retrieveIdentity(api, accountId) {
  var _api$query$identity;

  return (accountId && ((_api$query$identity = api.query.identity) === null || _api$query$identity === void 0 ? void 0 : _api$query$identity.identityOf) ? api.query.identity.identityOf(accountId) : (0, _rxjs.of)(undefined)).pipe((0, _operators.map)(identityOfOpt => {
    if (!(identityOfOpt === null || identityOfOpt === void 0 ? void 0 : identityOfOpt.isSome)) {
      return {
        judgements: []
      };
    }

    const {
      info,
      judgements
    } = identityOfOpt.unwrap();
    return {
      display: dataAsString(info.display),
      email: dataAsString(info.email),
      image: dataAsString(info.image),
      legal: dataAsString(info.legal),
      pgp: info.pgpFingerprint.isSome ? info.pgpFingerprint.unwrap().toHex() : undefined,
      riot: dataAsString(info.riot),
      web: dataAsString(info.web),
      judgements
    };
  }));
}
/**
 * @name info
 * @description Returns aux. info with regards to an account, current that includes the accountId, accountIndex and nickname
 */


function info(api) {
  return (0, _util2.memo)(address => api.derive.accounts.idAndIndex(address).pipe((0, _operators.switchMap)((_ref) => {
    let [accountId, accountIndex] = _ref;
    return (0, _rxjs.combineLatest)([(0, _rxjs.of)({
      accountId,
      accountIndex
    }), retrieveIdentity(api, accountId), retrieveNick(api, accountId)]);
  }), (0, _operators.map)((_ref2) => {
    let [{
      accountId,
      accountIndex
    }, identity, nickname] = _ref2;
    return {
      accountId,
      accountIndex,
      identity,
      nickname
    };
  })));
}