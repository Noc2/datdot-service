"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.info = info;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _util = require("@polkadot/util");

var _util2 = require("../util");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function dataAsString(data) {
  return data.isRaw ? (0, _util.u8aToString)(data.asRaw.toU8a(true)) : data.isSha256 ? data.asSha256.toHex() : undefined;
}

function includedWrapper(accountId) {
  return function (id) {
    return id.eq(accountId);
  };
}

function retrieveNick(api, accountId) {
  var _api$query$nicks;

  return (accountId && ((_api$query$nicks = api.query.nicks) === null || _api$query$nicks === void 0 ? void 0 : _api$query$nicks.nameOf) ? api.query.nicks.nameOf(accountId) : (0, _rxjs.of)(undefined)).pipe((0, _operators.map)(nameOf => (nameOf === null || nameOf === void 0 ? void 0 : nameOf.isSome) ? (0, _util.u8aToString)(nameOf.unwrap()[0]).substr(0, api.consts.nicks.maxLength.toNumber()) : undefined));
}

function extractIdentity(identityOfOpt, superOf) {
  if (!(identityOfOpt === null || identityOfOpt === void 0 ? void 0 : identityOfOpt.isSome)) {
    return {
      judgements: []
    };
  }

  const {
    info,
    judgements
  } = identityOfOpt.unwrap();
  const topDisplay = dataAsString(info.display);
  return {
    display: superOf ? dataAsString(superOf[1]) || topDisplay : topDisplay,
    displayParent: superOf ? topDisplay : undefined,
    email: dataAsString(info.email),
    image: dataAsString(info.image),
    judgements,
    legal: dataAsString(info.legal),
    other: info.additional.reduce((other, [_key, _value]) => {
      const key = dataAsString(_key);
      const value = dataAsString(_value);

      if (key && value) {
        other[key] = value;
      }

      return other;
    }, {}),
    parent: superOf ? superOf[0] : undefined,
    pgp: info.pgpFingerprint.isSome ? info.pgpFingerprint.unwrap().toHex() : undefined,
    riot: dataAsString(info.riot),
    twitter: dataAsString(info.twitter),
    web: dataAsString(info.web)
  };
}

function retrieveIdentity(api, accountId) {
  var _api$query$identity;

  return (accountId && ((_api$query$identity = api.query.identity) === null || _api$query$identity === void 0 ? void 0 : _api$query$identity.identityOf) ? api.queryMulti([[api.query.identity.identityOf, accountId], [api.query.identity.superOf, accountId]]) : (0, _rxjs.of)([undefined, undefined])).pipe((0, _operators.switchMap)(([identityOfOpt, superOfOpt]) => {
    if (identityOfOpt === null || identityOfOpt === void 0 ? void 0 : identityOfOpt.isSome) {
      // this identity has something set
      return (0, _rxjs.of)([identityOfOpt, undefined]);
    } else if (superOfOpt === null || superOfOpt === void 0 ? void 0 : superOfOpt.isSome) {
      const superOf = superOfOpt.unwrap(); // we have a super

      return (0, _rxjs.combineLatest)([api.query.identity.identityOf(superOf[0]), (0, _rxjs.of)(superOf)]);
    } // nothing of value returned


    return (0, _rxjs.of)([undefined, undefined]);
  }), (0, _operators.map)(([identityOfOpt, superOf]) => extractIdentity(identityOfOpt, superOf)));
}

function retrieveFlags(api, accountId) {
  var _api$query$councilSec, _api$query$council, _api$query$technicalC, _api$query$society, _api$query$sudo;

  const councilSection = api.query.electionsPhragmen ? 'electionsPhragmen' : 'elections';
  return (0, _rxjs.combineLatest)([((_api$query$councilSec = api.query[councilSection]) === null || _api$query$councilSec === void 0 ? void 0 : _api$query$councilSec.members) ? api.query[councilSection].members() : (0, _rxjs.of)(undefined), ((_api$query$council = api.query.council) === null || _api$query$council === void 0 ? void 0 : _api$query$council.members) ? api.query.council.members() : (0, _rxjs.of)([]), ((_api$query$technicalC = api.query.technicalCommittee) === null || _api$query$technicalC === void 0 ? void 0 : _api$query$technicalC.members) ? api.query.technicalCommittee.members() : (0, _rxjs.of)([]), ((_api$query$society = api.query.society) === null || _api$query$society === void 0 ? void 0 : _api$query$society.members) ? api.query.society.members() : (0, _rxjs.of)([]), ((_api$query$sudo = api.query.sudo) === null || _api$query$sudo === void 0 ? void 0 : _api$query$sudo.key) ? api.query.sudo.key() : (0, _rxjs.of)(undefined)]).pipe((0, _operators.map)(([electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) => {
    const checkIncluded = includedWrapper(accountId);
    return {
      isCouncil: ((electionsMembers === null || electionsMembers === void 0 ? void 0 : electionsMembers.map(([id]) => id)) || councilMembers || []).some(checkIncluded),
      isSociety: societyMembers.some(checkIncluded),
      isSudo: !!sudoKey && sudoKey.eq(accountId),
      isTechCommittee: technicalCommitteeMembers.some(checkIncluded)
    };
  }));
}
/**
 * @name info
 * @description Returns aux. info with regards to an account, current that includes the accountId, accountIndex and nickname
 */


function info(api) {
  return (0, _util2.memo)(address => api.derive.accounts.idAndIndex(address).pipe((0, _operators.switchMap)(([accountId, accountIndex]) => (0, _rxjs.combineLatest)([(0, _rxjs.of)({
    accountId,
    accountIndex
  }), retrieveFlags(api, accountId), retrieveIdentity(api, accountId), retrieveNick(api, accountId)])), (0, _operators.map)(([{
    accountId,
    accountIndex
  }, flags, identity, nickname]) => _objectSpread({
    accountId,
    accountIndex
  }, flags, {
    identity,
    nickname
  }))));
}