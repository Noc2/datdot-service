"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.proposals = proposals;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _util = require("../util");

// Copyright 2017-2020 @polkadot/api-derive authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
function retrieveProposals(api, section, hashes) {
  return (0, _rxjs.combineLatest)([// We are doing single subscriptions on all these, multi may yield old results
  (0, _rxjs.combineLatest)(hashes.map(hash => api.query[section].proposalOf(hash))), api.query[section].voting.multi(hashes)]).pipe((0, _operators.map)(([proposals, votes]) => {
    const result = [];
    proposals.forEach((proposalOpt, index) => {
      if (proposalOpt.isSome) {
        result.push({
          hash: hashes[index],
          proposal: proposalOpt.unwrap(),
          votes: votes[index].unwrapOr(null)
        });
      }
    });
    return result;
  }));
}

function proposals(api, section) {
  return (0, _util.memo)(() => api.query[section] ? api.query[section].proposals().pipe((0, _operators.switchMap)(proposals => retrieveProposals(api, section, proposals))) : (0, _rxjs.of)([]));
}