"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.proposals = proposals;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _types = require("@polkadot/types");

var _util = require("../util");

// Copyright 2017-2019 @polkadot/api-derive authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
function parse(api, _ref) {
  let {
    depositors,
    proposals,
    preimages
  } = _ref;
  return proposals.filter((_ref2, index) => {
    var _preimages$index, _depositors$index;

    let [,, proposer] = _ref2;
    return !!((_preimages$index = preimages[index]) === null || _preimages$index === void 0 ? void 0 : _preimages$index.isSome) && !!((_depositors$index = depositors[index]) === null || _depositors$index === void 0 ? void 0 : _depositors$index.isSome) && !proposer.isEmpty;
  }).map((_ref3, index) => {
    let [propIndex, hash, proposer] = _ref3;
    const preimage = preimages[index].unwrapOr(null);
    const depositor = depositors[index].unwrap();
    return {
      balance: depositor[0],
      hash,
      index: propIndex,
      preimage: preimage ? {
        at: preimage[3],
        balance: preimage[2],
        proposer: preimage[1]
      } : undefined,
      proposal: preimage ? (0, _types.createType)(api.registry, 'Proposal', preimage[0].toU8a(true)) : undefined,
      proposer,
      seconds: depositor[1]
    };
  });
}

function proposals(api) {
  return (0, _util.memo)(() => {
    var _api$query$democracy;

    return ((_api$query$democracy = api.query.democracy) === null || _api$query$democracy === void 0 ? void 0 : _api$query$democracy.publicProps) ? api.query.democracy.publicProps().pipe((0, _operators.switchMap)(proposals => (0, _rxjs.combineLatest)([(0, _rxjs.of)(proposals), api.query.democracy.preimages.multi(proposals.map((_ref4) => {
      let [, hash] = _ref4;
      return hash;
    })), api.query.democracy.depositOf.multi(proposals.map((_ref5) => {
      let [index] = _ref5;
      return index;
    }))])), (0, _operators.map)((_ref6) => {
      let [proposals, preimages, depositors] = _ref6;
      return parse(api, {
        depositors,
        proposals,
        preimages
      });
    })) : (0, _rxjs.of)([]);
  });
}