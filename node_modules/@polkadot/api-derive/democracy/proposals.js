"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.proposals = proposals;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _types = require("@polkadot/types");

var _util = require("../util");

// Copyright 2017-2020 @polkadot/api-derive authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
function parse(api, {
  depositors,
  proposals,
  preimages
}) {
  return proposals.filter(([,, proposer], index) => {
    var _depositors$index;

    return !!((_depositors$index = depositors[index]) === null || _depositors$index === void 0 ? void 0 : _depositors$index.isSome) && !proposer.isEmpty;
  }).map(([propIndex, hash, proposer], index) => {
    const preimage = preimages[index].unwrapOr(null);
    const depositor = depositors[index].unwrap();
    let proposal; // we could end up in a situation where the proposal is non-decodable, e.g. after an upgrade

    if (preimage) {
      try {
        proposal = (0, _types.createType)(api.registry, 'Proposal', preimage[0].toU8a(true));
      } catch (error) {
        console.error(error);
      }
    }

    return {
      balance: depositor[0],
      hash,
      index: propIndex,
      preimage: preimage ? {
        at: preimage[3],
        balance: preimage[2],
        proposer: preimage[1]
      } : undefined,
      proposal,
      proposer,
      seconds: depositor[1]
    };
  });
}

function proposals(api) {
  return (0, _util.memo)(() => {
    var _api$query$democracy;

    return ((_api$query$democracy = api.query.democracy) === null || _api$query$democracy === void 0 ? void 0 : _api$query$democracy.publicProps) ? api.query.democracy.publicProps().pipe((0, _operators.switchMap)(proposals => (0, _rxjs.combineLatest)([(0, _rxjs.of)(proposals), api.query.democracy.preimages.multi(proposals.map(([, hash]) => hash)), api.query.democracy.depositOf.multi(proposals.map(([index]) => index))])), (0, _operators.map)(([proposals, preimages, depositors]) => parse(api, {
      depositors,
      proposals,
      preimages
    }))) : (0, _rxjs.of)([]);
  });
}