"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.proposals = proposals;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _util = require("../util");

// Copyright 2017-2020 @polkadot/api-derive authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
function parse([proposals, images, depositors]) {
  return proposals.filter(([,, proposer], index) => {
    var _depositors$index;

    return !!((_depositors$index = depositors[index]) === null || _depositors$index === void 0 ? void 0 : _depositors$index.isSome) && !proposer.isEmpty;
  }).map(([index, imageHash, proposer], proposalIndex) => {
    const [balance, seconds] = depositors[proposalIndex].unwrap();
    return {
      balance,
      image: images[proposalIndex],
      imageHash,
      index,
      proposer,
      seconds
    };
  });
}

function proposals(api) {
  return (0, _util.memo)(() => {
    var _api$query$democracy, _api$query$democracy2;

    return ((_api$query$democracy = api.query.democracy) === null || _api$query$democracy === void 0 ? void 0 : _api$query$democracy.publicProps) && ((_api$query$democracy2 = api.query.democracy) === null || _api$query$democracy2 === void 0 ? void 0 : _api$query$democracy2.preimages) ? api.query.democracy.publicProps().pipe((0, _operators.switchMap)(proposals => (0, _rxjs.combineLatest)([(0, _rxjs.of)(proposals), api.derive.democracy.preimages(proposals.map(([, hash]) => hash)), api.query.democracy.depositOf.multi(proposals.map(([index]) => index))])), (0, _operators.map)(parse)) : (0, _rxjs.of)([]);
  });
}