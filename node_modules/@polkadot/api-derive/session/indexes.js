"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.indexes = indexes;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _types = require("@polkadot/types");

var _util = require("../util");

// Copyright 2017-2020 @polkadot/api-derive authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
// parse into Indexes
function parse([activeEra, activeEraStart, currentEra, currentIndex, validatorCount]) {
  return {
    activeEra,
    activeEraStart,
    currentEra,
    currentIndex,
    validatorCount
  };
} // query for previous V2


function queryNoActive(api) {
  return api.queryMulti([api.query.staking.currentEra, api.query.session.currentIndex, api.query.staking.validatorCount]).pipe((0, _operators.map)(([currentEra, currentIndex, validatorCount]) => [currentEra, (0, _types.createType)(api.registry, 'Option<MomentOf>'), currentEra, currentIndex, validatorCount]));
} // query based on latest


function query(api) {
  return api.queryMulti([api.query.staking.activeEra, api.query.staking.activeEraStart, api.query.staking.currentEra, api.query.session.currentIndex, api.query.staking.validatorCount]).pipe((0, _operators.map)(([activeEra, activeEraStart, currentEra, currentIndex, validatorCount]) => [activeEra.unwrapOr((0, _types.createType)(api.registry, 'EraIndex', 1)), activeEraStart, currentEra.unwrapOr((0, _types.createType)(api.registry, 'EraIndex', 1)), currentIndex, validatorCount]));
} // empty set when none is available


function empty(api) {
  return (0, _rxjs.of)([(0, _types.createType)(api.registry, 'EraIndex', 1), (0, _types.createType)(api.registry, 'Option<MomentOf>'), (0, _types.createType)(api.registry, 'EraIndex', 1), (0, _types.createType)(api.registry, 'SessionIndex', 1), (0, _types.createType)(api.registry, 'u32')]);
}

function indexes(api) {
  return (0, _util.memo)(() => (api.query.session && api.query.staking ? api.query.staking.activeEra ? query(api) : queryNoActive(api) : empty(api)).pipe((0, _operators.map)(parse)));
}