"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.account = account;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _bn = _interopRequireDefault(require("bn.js"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _types = require("@polkadot/types");

var _util = require("@polkadot/util");

var _util2 = require("../util");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// groups the supplied chunks by era, i.e. { [era]: BN(total of values) }
function groupByEra(list) {
  return list.reduce((map, _ref) => {
    let {
      era,
      value
    } = _ref;
    const key = era.toString();
    map[key] = !map[key] ? value.unwrap() : map[key].add(value.unwrap());
    return map;
  }, {});
} // calculate the remaining blocks in a specific unlock era


function remainingBlocks(api, era, sessionInfo) {
  const remaining = era.sub(sessionInfo.currentEra); // on the Rust side the current-era >= era-for-unlock (removal done on >)

  return (0, _types.createType)(api.registry, 'BlockNumber', remaining.gtn(0) ? remaining.subn(1).mul(sessionInfo.eraLength).add(sessionInfo.eraLength.sub(sessionInfo.eraProgress)) : 0);
}

function calculateUnlocking(api, stakingLedger, sessionInfo) {
  if ((0, _util.isUndefined)(stakingLedger)) {
    return undefined;
  }

  const unlockingChunks = stakingLedger.unlocking.filter((_ref2) => {
    let {
      era
    } = _ref2;
    return remainingBlocks(api, era.unwrap(), sessionInfo).gtn(0);
  });

  if (!unlockingChunks.length) {
    return undefined;
  } // group the unlock chunks that have the same era and sum their values


  const groupedResult = groupByEra(unlockingChunks);
  const results = Object.entries(groupedResult).map((_ref3) => {
    let [eraString, value] = _ref3;
    return {
      value: (0, _types.createType)(api.registry, 'Balance', value),
      remainingBlocks: remainingBlocks(api, new _bn.default(eraString), sessionInfo)
    };
  });
  return results.length ? results : undefined;
}

function redeemableSum(api, stakingLedger, sessionInfo) {
  if ((0, _util.isUndefined)(stakingLedger)) {
    return (0, _types.createType)(api.registry, 'Balance');
  }

  return (0, _types.createType)(api.registry, 'Balance', stakingLedger.unlocking.reduce((total, _ref4) => {
    let {
      era,
      value
    } = _ref4;
    return remainingBlocks(api, era.unwrap(), sessionInfo).eqn(0) ? total.add(value.unwrap()) : total;
  }, new _bn.default(0)));
}

function parseResult(api, sessionInfo, query) {
  return _objectSpread({}, query, {
    redeemable: redeemableSum(api, query.stakingLedger, sessionInfo),
    unlocking: calculateUnlocking(api, query.stakingLedger, sessionInfo)
  });
}
/**
 * @description From a stash, retrieve the controllerId and fill in all the relevant staking details
 */


function account(api) {
  return (0, _util2.memo)(accountId => (0, _rxjs.combineLatest)([api.derive.session.info(), api.derive.staking.query(accountId)]).pipe((0, _operators.map)((_ref5) => {
    let [sessionInfo, query] = _ref5;
    return parseResult(api, sessionInfo, query);
  })));
}