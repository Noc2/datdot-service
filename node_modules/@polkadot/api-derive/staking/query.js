"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.query = query;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _types = require("@polkadot/types");

var _util = require("../util");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function unwrapSessionIds(stashId, queuedKeys, nextKeys) {
  const sessionIds = (queuedKeys.find(([currentId]) => currentId.eq(stashId)) || [undefined, []])[1];
  const nextSessionIds = nextKeys.unwrapOr([]);
  return {
    nextSessionIds,
    sessionIds
  };
}

function retrievePrev(api, stashId) {
  return api.queryMulti([[api.query.staking.bonded, stashId], [api.query.staking.nominators, stashId], [api.query.staking.payee, stashId], [api.query.staking.validators, stashId], [api.query.session.nextKeys, [api.consts.session.dedupKeyPrefix, stashId]], [api.query.staking.stakers, stashId]]);
}

function retrieveCurr(api, stashId) {
  return api.derive.session.indexes().pipe((0, _operators.switchMap)(({
    activeEra
  }) => api.queryMulti([[api.query.staking.bonded, stashId], [api.query.staking.nominators, stashId], [api.query.staking.payee, stashId], [api.query.staking.validators, stashId], [api.query.session.nextKeys, [api.consts.session.dedupKeyPrefix, stashId]], [api.query.staking.erasStakers, [activeEra, stashId]]])));
}

function retrieveController(api, stashId, [queuedKeys, [controllerIdOpt, nominatorsOpt, rewardDestination, [validatorPrefs], nextKeys, exposure]]) {
  const controllerId = controllerIdOpt.unwrapOr(null);
  return controllerId ? api.query.staking.ledger(controllerId).pipe((0, _operators.map)(stakingLedgerOpt => _objectSpread({
    accountId: stashId,
    controllerId,
    exposure,
    nominators: nominatorsOpt.unwrapOr([{
      targets: []
    }])[0].targets,
    rewardDestination,
    stakingLedger: stakingLedgerOpt.unwrapOr(undefined),
    stashId,
    validatorPrefs
  }, unwrapSessionIds(stashId, queuedKeys, nextKeys)))) : (0, _rxjs.of)({
    accountId: stashId,
    nextSessionIds: [],
    sessionIds: []
  });
}
/**
 * @description From a stash, retrieve the controllerId and all relevant details
 */


function query(api) {
  return (0, _util.memo)(accountId => {
    const stashId = (0, _types.createType)(api.registry, 'AccountId', accountId);
    return (0, _rxjs.combineLatest)([api.query.session.queuedKeys(), api.query.staking.erasStakers ? retrieveCurr(api, stashId) : retrievePrev(api, stashId)]).pipe((0, _operators.switchMap)(result => retrieveController(api, stashId, result)));
  });
}