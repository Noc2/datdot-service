"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

var _static = _interopRequireDefault(require("./v10/static.polkadot"));

var _MagicNumber = require("./MagicNumber");

var _MetadataVersioned = _interopRequireDefault(require("./MetadataVersioned"));

// Copyright 2017-2020 @polkadot/metadata authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name Metadata
 * @description
 * The versioned runtime metadata as a decoded structure
 */
class Metadata extends _MetadataVersioned.default {
  constructor(registry, value) {
    super(registry, Metadata.decodeMetadata(registry, value));
  } // first we try and parse using the versioned structure, if this does fail,
  // we adjust with the magic number and a manual version and re-try. As soon as
  // we remove support for V0, we will just do a new here


  static decodeMetadata(registry, _value = new Uint8Array()) {
    /**
     * HACK 01.02.2020
     * There was a fk-up in the metadata upgrade process: Kusama's metadata got
     * updated to a non-backward-compatible way, but the metadata version
     * stayed at v9. Then v10 was merged in Substrate but not Kusama. Here,
     * we're just saying that if it's Kusama's metadata, decode as v10.
     */
    if ((0, _util.isHex)(_value) && _value === _static.default) {
      return Metadata.decodeMetadata(registry, _value.replace('0x6d65746109', '0x6d6574610a'));
    }

    const value = (0, _util.isHex)(_value) ? (0, _util.hexToU8a)(_value) : _value;

    try {
      return new _MetadataVersioned.default(registry, value);
    } catch (error) {
      if (error.message.indexOf('MagicNumber mismatch') === -1) {
        throw error;
      }
    }

    return new _MetadataVersioned.default(registry, (0, _util.u8aConcat)((0, _util.bnToU8a)(_MagicNumber.MAGIC_NUMBER), // manually add the magic number
    Uint8Array.from([0]), // add the version for the original
    value // the actual data as retrieved
    ));
  }

}

exports.default = Metadata;