"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMetadataTypes = getMetadataTypes;
exports.getSpecTypes = getSpecTypes;
exports.getUserTypes = getUserTypes;
exports.getModuleTypes = getModuleTypes;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _util = require("@polkadot/util");

var _overrides = require("./overrides");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// flatten a VersionedType[] into a Record<string, string>

/** @internal */
function filterVersions(versions = [], version) {
  return versions.filter(({
    minmax: [min, max]
  }) => ((0, _util.isUndefined)(min) || version >= min) && ((0, _util.isUndefined)(max) || version <= max)).reduce((result, {
    types
  }) => _objectSpread({}, result, {}, types), {});
} // based on the metadata version, return the registry types

/** @internal */


function getMetadataTypes(version) {
  return filterVersions(_overrides.TYPES_META, version);
} // based on the chain and runtimeVersion, get the applicable types (ready for registration)

/** @internal */


function getSpecTypes(chainName, {
  specName,
  specVersion
}) {
  const _chainName = chainName.toString();

  const _specName = specName.toString();

  const _specVersion = specVersion.toNumber();

  return _objectSpread({}, filterVersions(_overrides.TYPES_SPEC[_specName], _specVersion), {}, filterVersions(_overrides.TYPES_CHAIN[_chainName], _specVersion));
} // based on the spec and chain, get the specific user-defind types

/** @internal */


function getUserTypes(chainName, {
  specName
}, typesChain = {}, typesSpec = {}) {
  const _chainName = chainName.toString();

  const _specName = specName.toString();

  return _objectSpread({}, typesSpec[_specName] || {}, {}, typesChain[_chainName] || {});
} // get types for specific modules (metadata override)

/** @internal */


function getModuleTypes(section) {
  return _overrides.TYPES_MODULES[section] || {};
}