"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TYPES_SPEC = exports.TYPES_MODULES = exports.TYPES_META = exports.TYPES_CHAIN = void 0;
// Copyright 2017-2020 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
// type overrides for modules (where duplication between modules exist)
const TYPES_MODULES = {
  // old metadata & naming
  contract: {
    // v2 & v3
    AccountInfo: 'ContractAccountInfo'
  },
  // current from here on
  contracts: {
    StorageKey: 'ContractStorageKey'
  },
  identity: {
    Judgement: 'IdentityJudgement'
  },
  parachains: {
    Id: 'ParaId'
  },
  society: {
    Judgement: 'SocietyJudgement',
    Vote: 'SocietyVote'
  },
  staking: {
    Compact: 'CompactAssignments'
  },
  treasury: {
    Proposal: 'TreasuryProposal'
  }
}; // these are override types for Polkadot & Kusama chains
// NOTE The SessionKeys definition for Polkadot and Substrate (OpaqueKeys
// implementation) are different. Detect Polkadot and inject the `Keys`
// definition as applicable. (4 keys in substrate vs 5 in Polkadot/CC3).

exports.TYPES_MODULES = TYPES_MODULES;
const TYPES_POLKADOT_VERSIONED = [{
  minmax: [1000, undefined],
  types: {
    Address: 'GenericAddress',
    BalanceLock: 'BalanceLockTo212',
    Keys: 'SessionKeys5',
    StakingLedger: 'StakingLedgerTo223'
  }
}, {
  minmax: [1004, undefined],
  types: {
    // Indices optional, not in transaction
    Address: 'AccountId',
    Keys: 'SessionKeys5',
    StakingLedger: 'StakingLedgerTo223'
  }
}];
const TYPES_KUSAMA_VERSIONED = [{
  minmax: [1019, 1031],
  types: {
    Address: 'GenericAddress',
    BalanceLock: 'BalanceLockTo212',
    DispatchError: 'DispatchErrorTo198',
    Keys: 'SessionKeys5',
    SlashingSpans: 'SlashingSpansTo204',
    StakingLedger: 'StakingLedgerTo223'
  }
}, {
  minmax: [1032, 1042],
  types: {
    Address: 'GenericAddress',
    BalanceLock: 'BalanceLockTo212',
    Keys: 'SessionKeys5',
    SlashingSpans: 'SlashingSpansTo204',
    StakingLedger: 'StakingLedgerTo223'
  }
}, {
  minmax: [1043, 1045],
  types: {
    Address: 'GenericAddress',
    BalanceLock: 'BalanceLockTo212',
    Keys: 'SessionKeys5',
    StakingLedger: 'StakingLedgerTo223'
  }
}, {
  minmax: [1046, undefined],
  types: {
    // Indices optional, not in transaction
    Address: 'AccountId',
    Keys: 'SessionKeys5',
    StakingLedger: 'StakingLedgerTo223'
  }
}]; // Type overrides based on specific nodes

const TYPES_CHAIN = {}; // Type overrides based on  metadata versions

exports.TYPES_CHAIN = TYPES_CHAIN;
const TYPES_META = [{
  // NOTE this is for support of old, e.g. Alex, old metadata and BlockNumber/Index
  // This is detected based on metadata version, since this is what we have up-front
  //   v3 = Alex
  //   v4 = v1.0 branch
  minmax: [0, 4],
  types: {
    Address: 'GenericAddress',
    BlockNumber: 'u64',
    Index: 'u64',
    EventRecord: 'EventRecordTo76',
    ValidatorPrefs: 'ValidatorPrefsTo145',
    StakingLedger: 'StakingLedgerTo223'
  }
}]; // Type overrides for specific spec types & versions as given in runtimeVersion

exports.TYPES_META = TYPES_META;
const TYPES_SPEC = {
  kusama: TYPES_KUSAMA_VERSIONED,
  polkadot: TYPES_POLKADOT_VERSIONED
};
exports.TYPES_SPEC = TYPES_SPEC;