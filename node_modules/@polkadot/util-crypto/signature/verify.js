"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = signatureVerify;

var _util = require("@polkadot/util");

var _decode = _interopRequireDefault(require("../address/decode"));

var _verify = _interopRequireDefault(require("../nacl/verify"));

var _verify2 = _interopRequireDefault(require("../schnorrkel/verify"));

// Copyright 2017-2020 @polkadot/util-crypto authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const VERIFIERS = [['ed25519', _verify.default], ['sr25519', _verify2.default]];

function verifyDetect(result, message, signature, publicKey) {
  result.isValid = VERIFIERS.some(([crypto, verify]) => {
    try {
      if (verify(message, signature, publicKey)) {
        result.crypto = crypto;
        return true;
      }
    } catch (error) {// do nothing, result.isValid still set to false
    }

    return false;
  });
  return result;
}

function verifyMultisig(result, message, signature, publicKey) {
  (0, _util.assert)([0, 1].includes(signature[0]), "Unknown crypto type, expected signature prefix of 0 or 1, found ".concat(signature[0]));
  const isEd25519 = signature[0] === 0;
  result.crypto = isEd25519 ? 'ed25519' : 'sr25519';

  try {
    result.isValid = isEd25519 ? (0, _verify.default)(message, signature.subarray(1), publicKey) : (0, _verify2.default)(message, signature.subarray(1), publicKey);
  } catch (error) {// ignore, result.isValid still set to false
  }

  return result;
}

function signatureVerify(message, signature, addressOrPublicKey) {
  const signatureU8a = (0, _util.u8aToU8a)(signature);
  (0, _util.assert)([64, 65].includes(signatureU8a.length), "Invalid signature length, expected 64 or 65 bytes, found ".concat(signatureU8a.length));
  const result = {
    crypto: 'none',
    isValid: false
  };
  const publicKey = (0, _decode.default)(addressOrPublicKey);
  return signatureU8a.length === 65 ? verifyMultisig(result, message, signatureU8a, publicKey) : verifyDetect(result, message, signatureU8a, publicKey);
}